/* This file was generated by Ragel. Your edits will be lost.
 *
 * This is a state machine implementation of String#unpack.
 *
 * vim: filetype=cpp
 */
#include "vm/config.h"

#include "vm.hpp"
#include "object_utils.hpp"
#include "on_stack.hpp"
#include "objectmemory.hpp"

#include "builtin/array.hpp"
#include "builtin/exception.hpp"
#include "builtin/fixnum.hpp"
#include "builtin/float.hpp"
#include "builtin/string.hpp"

namespace rubinius {

  namespace unpack {
    void inline increment(size_t& index, size_t n, size_t limit) {
      if(index + n < limit) {
        index += n;
      } else {
        index = limit;
      }
    }

    uint16_t swap16(uint16_t x) {
      return ((((x)&0xff)<<8) | (((x)>>8)&0xff));
    }

    uint32_t swap32(uint32_t x) {
      return ((((x)&0xff)<<24)
             |(((x)>>24)&0xff)
             |(((x)&0x0000ff00)<<8)
             |(((x)&0x00ff0000)>>8));
    }

    uint64_t swap64(uint64_t x) {
      return ((((x)&0x00000000000000ffLL)<<56)
             |(((x)&0xff00000000000000LL)>>56)
             |(((x)&0x000000000000ff00LL)<<40)
             |(((x)&0x00ff000000000000LL)>>40)
             |(((x)&0x0000000000ff0000LL)<<24)
             |(((x)&0x0000ff0000000000LL)>>24)
             |(((x)&0x00000000ff000000LL)<<8)
             |(((x)&0x000000ff00000000LL)>>8));
    }

    float swap_float(const uint8_t* str) {
      uint32_t x;
      float y;

      memcpy(&x, str, sizeof(uint32_t));
      x = swap32(x);
      memcpy(&y, &x, sizeof(float));

      return y;
    }

    double swap_double(const uint8_t* str) {
      uint64_t x;
      double y;

      memcpy(&x, str, sizeof(uint64_t));
      x = swap64(x);
      memcpy(&y, &x, sizeof(double));

      return y;
    }

    static inline int hex2num(char c) {
      switch (c) {
      case '0': case '1': case '2': case '3': case '4':
      case '5': case '6': case '7': case '8': case '9':
        return c - '0';
      case 'a': case 'b': case 'c':
      case 'd': case 'e': case 'f':
        return c - 'a' + 10;
      case 'A': case 'B': case 'C':
      case 'D': case 'E': case 'F':
        return c - 'A' + 10;
      default:
        return -1;
      }
    }

    String* quotable_printable(STATE, const char*& bytes, size_t remainder) {
      if(remainder == 0) {
        return String::create(state, 0, 0);
      }

      const char* bytes_end = bytes + remainder;
      String* str = String::create(state, 0, remainder);
      uint8_t *buf = str->byte_address();

      while(bytes < bytes_end) {
        if(*bytes == '=') {
          if(++bytes == bytes_end)
            break;

          if(bytes+1 < bytes_end && bytes[0] == '\r' && bytes[1] == '\n')
            bytes++;

          if(*bytes != '\n') {
            int c1, c2;

            if((c1 = hex2num(*bytes)) == -1)
              break;
            if(++bytes == bytes_end)
              break;
            if((c2 = hex2num(*bytes)) == -1)
              break;
            *buf++ = c1 << 4 | c2;
          }
        } else {
          *buf++ = *bytes;
        }
        bytes++;
      }

      *buf = 0;
      str->num_bytes(state, Fixnum::from(buf - str->byte_address()));

      return str;
    }

    String* base64_decode(STATE, const char*& bytes, size_t remainder) {
      if(remainder == 0) {
        return String::create(state, 0, 0);
      }

      static bool initialized = false;
      static signed char b64_xtable[256];

      if(!initialized) {
        initialized = true;

        for(int i = 0; i < 256; i++) {
          b64_xtable[i] = -1;
        }

        for(int i = 0; i < 64; i++) {
          static const char table[] =
            "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
          b64_xtable[(int)(table[i])] = i;
        }
      }

      const char* bytes_end = bytes + remainder;
      native_int num_bytes = (bytes_end - bytes) * 3 / 4;
      String* str = String::create(state, 0, num_bytes);
      uint8_t *buf = str->byte_address();

      int a = -1, b = -1, c = 0, d = 0;
      while(bytes < bytes_end) {
        a = b = c = d = -1;

        while((a = b64_xtable[(int)(*bytes)]) == -1 && bytes < bytes_end)
          bytes++;
        if(bytes >= bytes_end)
          break;
        bytes++;

        while((b = (int)b64_xtable[(int)(*bytes)]) == -1 && bytes < bytes_end)
          bytes++;
        if(bytes >= bytes_end)
          break;
        bytes++;

        while((c = (int)b64_xtable[(int)(*bytes)]) == -1 && bytes < bytes_end) {
          if(*bytes == '=')
            break;
          bytes++;
        }
        if(*bytes == '=' || bytes >= bytes_end)
          break;
        bytes++;

        while((d = (int)b64_xtable[(int)(*bytes)]) == -1 && bytes < bytes_end) {
          if(*bytes == '=')
            break;
          bytes++;
        }
        if(*bytes == '=' || bytes >= bytes_end)
          break;
        bytes++;

        *buf++ = a << 2 | b >> 4;
        *buf++ = b << 4 | c >> 2;
        *buf++ = c << 6 | d;
      }

      if(a != -1 && b != -1) {
        if(c == -1 && *bytes == '=') {
          *buf++ = a << 2 | b >> 4;
        } else if(c != -1 && *bytes == '=') {
          *buf++ = a << 2 | b >> 4;
          *buf++ = b << 4 | c >> 2;
        }
      }

      *buf = 0;
      str->num_bytes(state, Fixnum::from(buf - str->byte_address()));
      return str;
    }

    String* uu_decode(STATE, const char*& bytes, size_t remainder) {
      if(remainder == 0) {
        return String::create(state, 0, 0);
      }

      const char* bytes_end = bytes + remainder;
      native_int length = 0, num_bytes = (bytes_end - bytes) * 3 / 4;
      String* str = String::create(state, 0, num_bytes);
      uint8_t *buf = str->byte_address();

      while(bytes < bytes_end && *bytes > ' ' && *bytes < 'a') {
        size_t line = (*bytes++ - ' ') & 0x3f;
        length += line;
        if(length > num_bytes) {
          line -= length - num_bytes;
          length = num_bytes;
        }

        while(line > 0) {
          char values[4];
          int l = line > 3 ? 3 : line;

          for(int i = 0; i < 4; i++) {
            if(bytes < bytes_end && *bytes >= ' ') {
              values[i] = (*bytes++ - ' ') & 0x3f;
            } else {
              values[i] = 0;
            }
          }

          switch(l) {
          case 3:
            buf[2] = values[2] << 6 | values[3];
          case 2:
            buf[1] = values[1] << 4 | values[2] >> 2;
          case 1:
            buf[0] = values[0] << 2 | values[1] >> 4;
          }

          buf += l;
          line -= l;
        }

        if(*bytes == '\r') *bytes++;
        if(*bytes == '\n') {
          *bytes++;
        } else if(bytes < bytes_end && (bytes+1 == bytes_end || bytes[1] == '\n')) {
          // possible checksum byte
          bytes += 2;
        }
      }

      buf[length] = 0;
      str->num_bytes(state, Fixnum::from(length));
      return str;
    }

    String* bit_high(STATE, const char*& bytes, size_t count) {
      String* str = String::create(state, 0, count);
      uint8_t *buf = str->byte_address();
      int bits = 0;

      for(size_t i = 0; i < count; i++) {
        if(i & 7) {
          bits <<= 1;
        } else {
          bits = *bytes++;
        }

        buf[i] = (bits & 128) ? '1' : '0';
      }

      return str;
    }

    String* bit_low(STATE, const char*& bytes, size_t count) {
      String* str = String::create(state, 0, count);
      uint8_t *buf = str->byte_address();
      int bits = 0;

      for(size_t i = 0; i < count; i++) {
        if(i & 7) {
          bits >>= 1;
        } else {
          bits = *bytes++;
        }

        buf[i] = (bits & 1) ? '1' : '0';
      }

      return str;
    }

    static const char hexdigits[] = "0123456789abcdef0123456789ABCDEFx";

    String* hex_high(STATE, const char*& bytes, size_t count) {
      String* str = String::create(state, 0, count);
      uint8_t *buf = str->byte_address();
      int bits = 0;

      for(size_t i = 0; i < count; i++) {
        if(i & 1) {
          bits <<= 4;
        } else {
          bits = *bytes++;
        }

        buf[i] = unpack::hexdigits[(bits >> 4) & 15];
      }

      return str;
    }

    String* hex_low(STATE, const char*& bytes, size_t count) {
      String* str = String::create(state, 0, count);
      uint8_t *buf = str->byte_address();
      int bits = 0;

      for(size_t i = 0; i < count; i++) {
        if(i & 1) {
          bits >>= 4;
        } else {
          bits = *bytes++;
        }

        buf[i] = unpack::hexdigits[bits & 15];
      }

      return str;
    }
  }

#define UNPACK_ELEMENTS(create, bits)                     \
  for(; index < stop; index += width) {                   \
    const uint8_t* bytes = self->byte_address() + index;  \
    array->append(state, create(bits(bytes)));            \
    if(count > 0) count--;                                \
  }

#define unpack_elements   UNPACK_ELEMENTS

#define unpack_float_elements(t)  unpack_elements(to_float, t)

#define FIXNUM(b)         (Fixnum::from(b))
#define INTEGER(b)        (Integer::from(state, b))

#define to_float(b)       (Float::create(state, b))

#define SBYTE(p)          (*(int8_t*)(p))
#define UBYTE(p)          (*(uint8_t*)(p))

#define S16BITS(p)        (*(int16_t*)(p))
#define U16BITS(p)        (*(uint16_t*)(p))

#define S32BITS(p)        (*(int32_t*)(p))
#define U32BITS(p)        (*(uint32_t*)(p))

#define S64BITS(p)        (*(int64_t*)(p))
#define U64BITS(p)        (*(uint64_t*)(p))

#define float_bits(p)     (*(float*)(p))
#define double_bits(p)    (*(double*)(p))

#ifdef RBX_LITTLE_ENDIAN
# define LE_S16BITS(p)     (S16BITS(p))
# define LE_U16BITS(p)     (U16BITS(p))
# define LE_S32BITS(p)     (S32BITS(p))
# define LE_U32BITS(p)     (U32BITS(p))
# define LE_S64BITS(p)     (S64BITS(p))
# define LE_U64BITS(p)     (U64BITS(p))

# define BE_S16BITS(p)     ((int16_t)(unpack::swap16(U16BITS(p))))
# define BE_U16BITS(p)     ((uint16_t)(unpack::swap16(U16BITS(p))))
# define BE_S32BITS(p)     ((int32_t)(unpack::swap32(U32BITS(p))))
# define BE_U32BITS(p)     ((uint32_t)(unpack::swap32(U32BITS(p))))
# define BE_S64BITS(p)     ((int64_t)(unpack::swap64(U64BITS(p))))
# define BE_U64BITS(p)     ((uint64_t)(unpack::swap64(U64BITS(p))))

# define unpack_double            unpack_double_le
# define unpack_float             unpack_float_le

# define unpack_double_le         unpack_float_elements(double_bits)
# define unpack_float_le          unpack_float_elements(float_bits)

# define unpack_double_be         unpack_float_elements(unpack::swap_double)
# define unpack_float_be          unpack_float_elements(unpack::swap_float)
#else
# define LE_S16BITS(p)     ((int16_t)(unpack::swap16(U16BITS(p))))
# define LE_U16BITS(p)     ((uint16_t)(unpack::swap16(U16BITS(p))))
# define LE_S32BITS(p)     ((int32_t)(unpack::swap32(U32BITS(p))))
# define LE_U32BITS(p)     ((uint32_t)(unpack::swap32(U32BITS(p))))
# define LE_S64BITS(p)     ((int64_t)(unpack::swap64(U64BITS(p))))
# define LE_U64BITS(p)     ((uint64_t)(unpack::swap64(U64BITS(p))))

# define BE_S16BITS(p)     (S16BITS(p))
# define BE_U16BITS(p)     (U16BITS(p))
# define BE_S32BITS(p)     (S32BITS(p))
# define BE_U32BITS(p)     (U32BITS(p))
# define BE_S64BITS(p)     (S64BITS(p))
# define BE_U64BITS(p)     (U64BITS(p))

# define unpack_double            unpack_double_be
# define unpack_float             unpack_float_be

# define unpack_double_le         unpack_float_elements(unpack::swap_double)
# define unpack_float_le          unpack_float_elements(unpack::swap_float)

# define unpack_double_be         unpack_float_elements(double_bits)
# define unpack_float_be          unpack_float_elements(float_bits)
#endif

  Array* String::unpack(STATE, String* directives) {
    // Ragel-specific variables
    std::string d(directives->c_str(), directives->size());
    const char *p  = d.c_str();
    const char *pe = p + d.size();

    const char *eof = pe;
    int cs;

    // pack-specific variables
    String* self = this;
    Array* array = Array::create(state, 0);
    OnStack<2> sv(state, self, array);
    const char* bytes = 0;

    size_t bytes_size = self->size();
    size_t index = 0;
    size_t stop = 0;
    size_t width = 0;
    size_t count = 0;
    size_t remainder = 0;
    bool rest = false;
    bool platform = false;

%%{
  machine unpack;

  include "unpack.rl";

}%%

    if(unpack_first_final && unpack_error && unpack_en_main) {
      // do nothing
    }

    return force_as<Array>(Primitives::failure());
  }
}
